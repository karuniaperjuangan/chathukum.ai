import express from "express"
import { ChatOpenAI } from "@langchain/openai";
import { HumanMessage, SystemMessage } from "@langchain/core/messages";
import { processLawPDF, retrieveLawContent, chatWithLawAssistant } from '../controllers/chatController'
const router = express.Router()

/**
 * @swagger
 * /chat/ask-chatbot:
 *   post:
 *     summary: Get an answer from the legal assistant chatbot based on the user's question and context.
 *     tags:
 *       - Chat
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               question:
 *                 type: string
 *                 description: The question asked by the user.
 *                 example: "Apa isi pasal 1 ayat 1 UUD 1945?"
 *               chat_history:
 *                 type: array
 *                 description: List of previous messages exchanged in the chat session.
 *                 items:
 *                   type: object
 *                   properties:
 *                     role:
 *                       type: string
 *                       description: The role of the message sender (e.g., 'ai', 'human', 'system').
 *                       example: "human"
 *                     content:
 *                       type: string
 *                       description: The content of the message.
 *                       example: "Can you tell me about data privacy laws?"
 *                 example: [
 *                   { "role": "human", "content": "Apa bentuk negara Indonesia" },
 *                   { "role": "ai", "content": "Bentuk negara indonesia adalah republik" }
 *                 ]
 *               law_ids:
 *                 type: array
 *                 description: List of law IDs relevant to the user's question.
 *                 items:
 *                   type: integer
 *                 example: [101646]
 *     responses:
 *       200:
 *         description: Successfully retrieved answer from chatbot.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 answer:
 *                   type: string
 *                   description: The answer generated by the chatbot.
 *                   example: "Bunyi pasal 1 ayat 1 UUD 1945 adalah 'egara Indonesia ialah Negara Kesatuan, yang berbentuk Republik.'."
 *       500:
 *         description: Internal server error.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message describing the issue.
 *                   example: "Question is required."
 */

router.post("/ask-chatbot", chatWithLawAssistant)

/**
 * Retrieves law content based on a query.
 * @swagger
 * /chat/retrieve-content:
 *   post:
 *     tags:
 *       - Chat
 *     summary: Retrieves law content based on a query and uploads new laws to the vector database if necessary.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               law_ids:
 *                 type: array
 *                 items:
 *                   type: integer
 *               query:
 *                 type: string
 *     responses:
 *       '200':
 *         description: Successful response with similarity search results.
 *       '500':
 *         description: Internal server error.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 */
router.post("/retrieve-content", retrieveLawContent)

/**
 * Uploads multiple laws to the vector database.
 * @swagger
 * /chat/process-pdf:
 *   post:
 *     summary: Processes multiple laws by uploading their content to the vector database.
 *     tags:
 *       - Chat
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               law_ids:
 *                 type: array
 *                 items:
 *                   type: integer
 *     responses:
 *       '200':
 *         description: Successful response with a list of uploaded IDs.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 ids:
 *                   type: array
 *                   items:
 *                     type: string
 *       '500':
 *         description: Internal server error.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 */
router.post("/process-pdf", processLawPDF)

export default router